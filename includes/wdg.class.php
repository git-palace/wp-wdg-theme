<?php

/**
 * NOTE: PLEASE DO NOT EDIT THIS FILE
 * EXTEND IT INSTEAD IN FUNCTIONS.PHP
 */

require_once 'wdg.constants.php';
require_once 'wdg.walker.php';

Class WDG {
	public static $body_classes       = array();
	public static $enqueued_scripts   = array();
	public static $enqueued_styles    = array();
	public static $nav_menus          = array();
	public static $registered_scripts = array();
	public static $registered_styles  = array();
	public static $sidebars           = array();

	public static function init() {
		self::setup_filters();
		self::setup_actions();
	}

	public static function setup_actions() {
		$class = get_class($this);
		add_action('after_setup_theme', array($class, 'setup_theme'));
		add_action('after_setup_theme', array($class, 'languages_gravityforms'));
		add_action('after_setup_theme', array($class, 'register_nav_menus'));
		add_action('after_setup_theme', array($class, 'register_styles'), 10);
		add_action('after_setup_theme', array($class, 'enqueue_styles'));
		add_action('after_setup_theme', array($class, 'register_scripts'));
		add_action('after_setup_theme', array($class, 'enqueue_scripts'));
		add_action('after_setup_theme', array($class, 'wp_head_cleanup'));
		add_action('widgets_init', array($class, 'register_sidebars'));
		add_action('wp', array($class, 'setup_author_archive'));
		add_action('admin_menu', array($class, 'admin_disable_dashboard_widgets'));
	}

	public static function setup_filters() {
		$class = get_class($this);
		add_filter('nav_menu_item_id', '__return_empty_string');
		add_filter('nav_menu_link_attributes', array($class, 'filter_nav_menu_link_attributes'), null , 3);
		add_filter('the_generator', '__return_empty_string');
		add_filter('wp_title', array($class, 'filter_wp_title'), 10, 3);
	}

	public static function setup_theme() {
		add_theme_support('post-thumbnails');

		// This feature allows the use of HTML5 markup for the comment forms, search forms and comment lists.
		// See: http://codex.wordpress.org/Function_Reference/add_theme_support#HTML5
		add_theme_support('html5', array(
			'caption',
			'comment-form',
			'comment-list',
			'gallery',
			'search-form'
		));
	}

	/**
	 * Sets the authordata global when viewing an author archive.
	 *
	 * This provides backwards compatibility with
	 * http://core.trac.wordpress.org/changeset/25574
	 *
	 * It removes the need to call the_post() and rewind_posts() in an author
	 * template to print information about the author.
	 *
	 * See https://github.com/Automattic/_s/blob/86a0cd531d70cd3c65e360971e6b8fb0bc851fd4/inc/extras.php#L82
	 *
	 * @global WP_Query $wp_query WordPress Query object.
	 * @return void
	 */
	public static function setup_author_archive() {
		global $wp_query;

		if ($wp_query->is_author() && isset($wp_query->post)) {
			$GLOBALS['authordata'] = get_userdata($wp_query->post->post_author);
		}
	}

	public static function languages_gravityforms() {
		$gravityforms_mo = THEME_LANGUAGES_PATH . '/gravityforms-en_US.mo';

		if (file_exists($gravityforms_mo)) {
			load_textdomain('gravityforms', $gravityforms_mo);
		}
	}

	/**
	 * Include all PHP files from a directory
	 * @param string $dir_path Directory path
	 * @return array List of all included files
	 */
	public static function include_directory($dir_path) {
		$path = realpath($dir_path);
		if (!is_dir($path)) {
			return new WP_Error('invalid_path', 'Invalid $dir_path, it\'s not a directory');
		}

		$files = glob($path . DIRECTORY_SEPARATOR . '*');

		$files = apply_filters('WDG/include_directory', $files, $dir_path);

		if (!is_array($files)) {
			return;
		}

		foreach ($files as $file) {
			if (!is_file($file)) {
				continue;
			}

			$pathinfo = pathinfo($file);

			if ($pathinfo['extension'] !== 'php') {
				continue;
			}

			include_once $file;
		}

		return $files;
	}

	public static function nav($handle, $override_args = array()) {
		if (!is_string($handle)) {
			return new WP_Error('invalid_argument_type', '`$handle` isn\'t a String', $handle);
		}

		if (!is_array($override_args)) {
			return new WP_Error('invalid_argument_type', '`$override_args` isn\'t an Array', $override_args);
		}

		if (!isset(self::$nav_menus[$handle])) {
			return new WP_Error('nav_menu_not_registered', 'Menu handler is not registered', $handle);
		}

		$args = self::$nav_menus[$handle];

		$override_args = array_merge($override_args, array(
			'echo'        => false,
			'fallback_cb' => null,
			'WDG_builder' => true
		));

		$args = array_merge($args, $override_args);

		// build menu markup
		$menu = wp_nav_menu($args);
		// $menu = '<p>test</p>';

		// remove `id=""` attributes
		$menu = preg_replace('/(id=["\'][^"\']+["\']\ ?)/i', '', $menu);

		// apply filters from theme
		$menu = apply_filters('WDG/nav', $menu);

		// return menu
		return $menu;
	}

	public static function enqueue_style($handle, $priority = 10) {
		if (!isset(self::$registered_styles[$handle])) {
			return new WP_Error('enqueue_style_not_registered', 'Enqueued style is not registered', $handle, self::$registered_styles);
		}

		self::$enqueued_styles[$handle] = array(
			'handle'   => $handle,
			'priority' => $priority
		);

		return self::$enqueued_styles[$handle];
	}

	public static function enqueue_script($handle, $priority = 10) {
		if (!isset(self::$registered_scripts[$handle])) {
			return new WP_Error('enqueue_script_not_registered', 'Enqueued script is not registered', $handle, self::$registered_scripts);
		}

		self::$enqueued_scripts[$handle] = array(
			'handle'   => $handle,
			'priority' => $priority
		);

		return self::$enqueued_scripts[$handle];
	}

	/**
	 * Append CSS classes as strings to the `self::$body_class` array
	 * @param string|array $args,...
	 * @return array
	 */
	public static function add_body_class($args) {
		$body_classes = self::parse_args(func_get_args());

		if (is_wp_error($body_classes)) {
			return $body_classes;
		}

		// merge passed argument with default set of body classes
		$body_classes = array_merge(self::$body_classes, $body_classes);

		// remove duplicates
		$body_classes = array_unique($body_classes);

		// return value
		return self::$body_classes = apply_filters('WDG/add_body_class', $body_classes);
	}

	/**
	 * Append Navigation Menu items to the `self::$nav_menus` array
	 * @param string|array $args
	 * @return array
	 */
	public static function register_nav_menu($args) {
		if (!(is_string($args) || is_array($args))) {
			return new WP_Error('invalid_argument_type', 'Argument isn\'t a String or Array', $args);
		}

		$defaults = array(
			'container'       => 'nav',
			'container_class' => 'Nav',
			'description'     => '',
			'menu_class'      => 'Nav-menu Nav-menu--depth0',
			'theme_location'  => '',
			'walker'          => new WDG_Walker_Nav_Menu
		);

		// if $args is a string transform it into `theme_location`
		if (is_string($args)) {
			$args = strtolower($args);
			$args = array('theme_location' => $args);
		}

		// throw error if `theme_location` isn't available
		if (is_array($args) && !isset($args['theme_location'])) {
			return new WP_Error('theme_location_missing', '`array("theme_location" => "")` is missing from the argument', $args);
		}

		// Merge default arguments
		$defaults = apply_filters('WDG/register_nav_menu/defaults', $defaults, $args);
		$args     = array_merge($defaults, $args);

		// Set container CSS class name
		$args['container_class'] = ($args['container_class'] ? $args['container_class'] . ' ' : '') . 'Nav--' . $args['theme_location'];

		$args['description'] = (!empty($args['description'])) ? $args['description'] : self::humanize($args['theme_location'] . ' menu');

		// Append menu to `self::$nav_menus`
		self::$nav_menus[$args['theme_location']] = apply_filters('WDG/register_nav_menu', $args);

		return $args;
	}

	/**
	 * Creates a sidebar
	 * @param string|array
	 */
	public static function register_sidebar($args) {
		if (!(is_string($args) || is_array($args))) {
			return new WP_Error('invalid_argument_type', 'Argument isn\'t a String or Array', $args);
		}

		$defaults = array(
			'name'          => '',
			'id'            => '',
			'description'   => '',
			'class'         => '',
			'before_widget' => '<aside id="%1$s" class="Widget %2$s">',
			'after_widget'  => '</aside>',
			'before_title'  => '<h3 class="Widget-title">',
			'after_title'   => '</h3>'
		);
		
		// if $args is a string transform it into `id`
		if (is_string($args)) {
			$args = strtolower($args);
			$args = array_merge($defaults, array('id' => $args));
		}
		
		// throw error if `id` isn't available
		if (is_array($args) && !isset($args['id'])) {
			return new WP_Error('id_missing', '`array("id" => "")` is missing from the argument', $args);
		}

		// Merge default data
		$args = array_merge($defaults, $args);

		// Create a sidebar name from id
		if (empty($args['name'])) {
			// Append sidebar to the name
			$args['name'] = ($args['id'] == 'sidebar') ? $args['id'] : $args['id'] . ' sidebar';
			$args['name'] = self::humanize($args['name']);
		}

		// Append menu to `self::$nav_menus`
		self::$sidebars[$args['id']] = apply_filters('WDG/register_sidebar', $args);

		return $args;
	}

	public static function register_style($handle, $src, $deps = null, $ver = null, $media = 'screen') {
		$path = null;

		if (!is_string($handle)) {
			return new WP_Error('invalid_argument_type', '`$handle` isn\'t a String', $handle);
		}

		if (empty($handle)) {
			return new WP_Error('invalid_handle', '`$handle` is empty', $handle);
		}

		if (!is_string($src)) {
			return new WP_Error('invalid_argument_type', '`$src` isn\'t a String', $handle);
		}

		if (empty($src)) {
			return new WP_Error('invalid_src', '`$src` is empty', $handle);
		}

		if (strpos($src, THEME_CSS_URI) !== false) {
			$path = str_replace(THEME_CSS_URI, THEME_CSS_PATH, $src);
			$path = realpath($path);
		} elseif (strpos($src, THEME_VENDOR_URI) !== false) {
			$path = str_replace(THEME_VENDOR_URI, THEME_VENDOR_PATH, $src);
			$path = realpath($path);
		}

		if ($ver !== false && !$ver && $path) {
			$ver = self::filemtime($path);
		}

		$args = array(
			'deps'   => $deps,
			'handle' => $handle,
			'media'  => $media,
			'src'    => $src,
			'ver'    => $ver
		);

		self::$registered_styles[$handle] = $args;

		return $args;
	}

	public static function register_script($handle, $src, $deps = null, $ver = null, $in_footer = true) {
		$path = null;

		if (!is_string($handle)) {
			return new WP_Error('invalid_argument_type', '`$handle` isn\'t a String', $handle);
		}

		if (empty($handle)) {
			return new WP_Error('invalid_handle', '`$handle` is empty', $handle);
		}

		if (!is_string($src)) {
			return new WP_Error('invalid_argument_type', '`$src` isn\'t a String', $handle);
		}

		if (empty($src)) {
			return new WP_Error('invalid_src', '`$src` is empty', $handle);
		}

		if (strpos($src, THEME_JS_URI) !== false) {
			$path = str_replace(THEME_JS_URI, THEME_JS_PATH, $src);
			$path = realpath($path);
		} elseif (strpos($src, THEME_VENDOR_URI) !== false) {
			$path = str_replace(THEME_VENDOR_URI, THEME_VENDOR_PATH, $src);
			$path = realpath($path);
		}

		if ($ver !== false && !$ver && $path) {
			$ver = self::filemtime($path);
		}

		$args = array(
			'deps'      => $deps,
			'handle'    => $handle,
			'in_footer' => $in_footer,
			'src'       => $src,
			'ver'       => $ver
		);

		self::$registered_scripts[$handle] = $args;

		return $args;
	}

	public static function register_nav_menus() {
		$menus = array();

		foreach (apply_filters('WDG/nav_menus', self::$nav_menus) as $theme_location => $menu) {
			$menus[$theme_location] = $menu['description'];
		}

		$menus = apply_filters('register_nav_menus', $menus);
		register_nav_menus($menus);
	}

	public static function register_sidebars() {
		$sidebars = array();

		foreach (apply_filters('WDG/sidebars', self::$sidebars) as $id => $sidebar) {
			register_sidebar($sidebar);
		}
	}

	public static function register_styles() {
		$styles = apply_filters('WDG/registered_styles', self::$registered_styles);

		foreach ($styles as $id => $style) {
			$class = get_class($this);
			$style = apply_filters('WDG/register_style', $style);
			$code  = '$s = ' . $class . '::$registered_styles["' . $style['handle'] . '"]; wp_register_style($s["handle"], $s["src"], $s["deps"], $s["ver"], $s["media"]);';
			$fn    = create_function(null, $code);
			add_action('wp_enqueue_scripts', $fn);
		}

		return $styles;
	}

	public static function enqueue_styles() {
		if (!count(self::$enqueued_styles)) {
			return new WP_Error('enqueued_styles_empty', '`$enqueued_styles` is empty', self::$enqueued_styles);
		}

		foreach (self::$enqueued_styles as $style) {
			$code = 'wp_enqueue_style("' . $style['handle'] . '");';
			$fn   = create_function(null, $code);
			add_action('wp_enqueue_scripts', $fn, $style['priority']);
		}

		return self::$enqueued_styles;
	}

	public static function register_scripts() {
		$styles = apply_filters('WDG/registered_scripts', self::$registered_scripts);

		foreach ($styles as $id => $style) {
			$class = get_class($this);
			$style = apply_filters('WDG/register_script', $style);
			$code  = '$s = ' . $class . '::$registered_scripts["' . $style['handle'] . '"]; wp_register_script($s["handle"], $s["src"], $s["deps"], $s["ver"], $s["in_footer"]);';
			$fn    = create_function(null, $code);
			add_action('wp_enqueue_scripts', $fn);
		}

		return $styles;
	}

	public static function enqueue_scripts() {
		if (!count(self::$enqueued_scripts)) {
			return new WP_Error('enqueued_scripts_empty', '`$enqueued_scripts` is empty', self::$enqueued_scripts);
		}

		foreach (self::$enqueued_scripts as $script) {
			$code = 'wp_enqueue_script("' . $script['handle'] . '");';
			$fn   = create_function(null, $code);
			add_action('wp_enqueue_scripts', $fn, $script['priority']);
		}

		return self::$enqueued_scripts;
	}

	public static function filter_nav_menu_link_attributes($atts, $item, $args) {
		$classes       = empty($atts['class']) ? array() : explode(' ', $atts['class']);
		$classes[]     = 'Nav-link';
		$atts['class'] = implode(' ', $classes);
		return $atts;
	}

	/**
	 * Cleans the `wp_head()` action
	 * Code from Bones
	 * See https://github.com/eddiemachado/bones/blob/master/library/bones.php#L32
	 */
	public static function wp_head_cleanup() {
		// category feeds
		remove_action( 'wp_head', 'feed_links_extra', 3 );
		
		// post and comment feeds
		remove_action( 'wp_head', 'feed_links', 2 );
		
		// EditURI link
		remove_action( 'wp_head', 'rsd_link' );
		
		// windows live writer
		remove_action( 'wp_head', 'wlwmanifest_link' );
		
		// index link
		remove_action( 'wp_head', 'index_rel_link' );
		
		// previous link
		remove_action( 'wp_head', 'parent_post_rel_link', 10, 0 );
		
		// start link
		remove_action( 'wp_head', 'start_post_rel_link', 10, 0 );
		
		// links for adjacent posts
		remove_action( 'wp_head', 'adjacent_posts_rel_link_wp_head', 10, 0 );
		
		// WP version
		remove_action( 'wp_head', 'wp_generator' );
	}

	// disable default dashboard widgets
	// see https://github.com/eddiemachado/bones/blob/master/library/admin.php#L28
	function admin_disable_dashboard_widgets() {
		remove_meta_box('dashboard_activity', 'dashboard', 'core');       // Right Now Widget
		remove_meta_box('dashboard_right_now', 'dashboard', 'core');       // Right Now Widget
		remove_meta_box('dashboard_recent_comments', 'dashboard', 'core'); // Comments Widget
		remove_meta_box('dashboard_incoming_links', 'dashboard', 'core');  // Incoming Links Widget
		remove_meta_box('dashboard_plugins', 'dashboard', 'core');         // Plugins Widget

		remove_meta_box('dashboard_quick_press', 'dashboard', 'core');     // Quick Press Widget
		remove_meta_box('dashboard_recent_drafts', 'dashboard', 'core');   // Recent Drafts Widget
		remove_meta_box('dashboard_primary', 'dashboard', 'core');         //
		remove_meta_box('dashboard_secondary', 'dashboard', 'core');       //

		// removing plugin dashboard boxes
		remove_meta_box('yoast_db_widget', 'dashboard', 'normal');         // Yoast's SEO Plugin Widget
	}

	// A better title
	// http://www.deluxeblogtips.com/2012/03/better-title-meta-tag.html
	public static function filter_wp_title($title, $sep, $seplocation) {
		global $page, $paged;

		// Don't affect in feeds.
		if (is_feed()) {
			return $title;
		}

		// Add the blog's name
		if ('right' == $seplocation) {
			$title .= get_bloginfo('name');
		} else {
			$title = get_bloginfo('name') . $title;
		}

		// Add the blog description for the home/front page.
		$site_description = get_bloginfo('description', 'display');

		if ($site_description && (is_home() || is_front_page())) {
			$title .= " {$sep} {$site_description}";
		}

		// Add a page number if necessary:
		if ($paged >= 2 || $page >= 2) {
			$title .= " {$sep} " . sprintf(__('Page %s', 'dbt'), max($paged, $page));
		}

		return $title;
	}

	protected static function array_flatten($array, $return = array()) {
		for ($x = 0; $x <= count($array); $x++) {
			if (is_array($array[$x])) {
				$return = self::array_flatten($array[$x],$return);
			} else {
				if ($array[$x]) {
					$return[] = $array[$x];
				}
			}
		}
		return $return;
	}

	protected static function parse_string_args($arg) {
		if (is_string($arg) && strpos($arg, ' ') !== false) {
			$arg = explode(' ', $arg);
		}

		return $arg;
	}

	protected static function parse_array_args($args) {
		$result = array();

		foreach ($args as $arg) {
			if (!(is_string($arg) || is_array($arg))) {
				return new WP_Error('invalid_argument_type', 'Argument isn\'t a String or Array', $arg);
			}

			// if $args is a String, transform it to an Array
			$arg = self::parse_string_args($arg);

			// if $arg is an Array, recursively execute this function to convert all strings into arrays
			if (is_array($arg) && count($arg)) {
				$arg = self::parse_array_args($arg);
			}

			$result[] = $arg;
		}

		// return a multidimensional array
		return $result;
	}

	protected static function parse_args($args) {
		$args = self::parse_array_args($args);

		if (is_wp_error($args)) {
			return $args;
		}

		// flatten multidimensional array
		$args = self::array_flatten($args);

		// remove empty values
		$args = array_filter($args);

		// remove duplicates
		$args = array_unique($args);

		return $args;
	}

	protected static function humanize($str) {
		$str = trim(strtolower($str));
		$str = preg_replace('/[^a-z0-9\s+]/', '', $str);
		$str = preg_replace('/\s+/', ' ', $str);
		$str = explode(' ', $str);
		$str = array_map('ucwords', $str);
		return implode(' ', $str);
	}

	protected static function filemtime($path) {
		if (file_exists($path)) {
			return filemtime($path);
		}

		return false;
	}
}